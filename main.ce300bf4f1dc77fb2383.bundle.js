webpackJsonp([1],{"+XEq":function(e,n,t){"use strict";var i=t("3j3K");t.d(n,"a",function(){return s});var a=this&&this.__decorate||function(e,n,t,i){var a,s=arguments.length,o=s<3?n:null===i?i=Object.getOwnPropertyDescriptor(n,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,n,t,i);else for(var r=e.length-1;r>=0;r--)(a=e[r])&&(o=(s<3?a(o):s>3?a(n,t,o):a(n,t))||o);return s>3&&o&&Object.defineProperty(n,t,o),o},s=function(){function e(){this.formattedYear=2016==(new Date).getFullYear()?2016:"2016-"+(new Date).getFullYear()}return e}();s=a([t.i(i._11)({selector:"app-footer",template:t("f6ft")})],s)},0:function(e,n,t){e.exports=t("x35b")},"1hHk":function(e,n,t){"use strict";var i=t("3j3K");t.d(n,"a",function(){return s});var a=this&&this.__decorate||function(e,n,t,i){var a,s=arguments.length,o=s<3?n:null===i?i=Object.getOwnPropertyDescriptor(n,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,n,t,i);else for(var r=e.length-1;r>=0;r--)(a=e[r])&&(o=(s<3?a(o):s>3?a(n,t,o):a(n,t))||o);return s>3&&o&&Object.defineProperty(n,t,o),o},s=function(){function e(){}return e.prototype.ngAfterViewInit=function(){$("pre code").each(function(e,n){hljs.highlightBlock(n)}),ga("create","UA-52727032-2","auto"),ga("send","pageview")},e}();s=a([t.i(i._11)({selector:"app-cli",template:t("rHd9")})],s)},"1zB3":function(e,n){e.exports='<div *ngIf="release">\n  <article class="uk-article">\n    <h1 class="uk-article-title">\n      Release {{release.name}}\n    </h1>\n\n    <p>{{release.date}}</p>\n\n    <h3>Notes</h3>\n    <p>{{release.notes}}</p>\n\n    <h3>Reported bugs</h3>\n    <p>{{release.bugs}}</p>\n\n    <hr/>\n\n    <app-release [release]="release"></app-release>\n  </article>\n</div>\n'},"3avZ":function(e,n,t){"use strict";var i=t("3j3K"),a=t("2Je8");t.d(n,"a",function(){return o});var s=this&&this.__decorate||function(e,n,t,i){var a,s=arguments.length,o=s<3?n:null===i?i=Object.getOwnPropertyDescriptor(n,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,n,t,i);else for(var r=e.length-1;r>=0;r--)(a=e[r])&&(o=(s<3?a(o):s>3?a(n,t,o):a(n,t))||o);return s>3&&o&&Object.defineProperty(n,t,o),o},o=function(){function e(){}return e}();o=s([t.i(i._11)({selector:"app-header",template:t("SENk"),providers:[a.b]})],o)},"5xMp":function(e,n){e.exports="<app-header></app-header>\n<router-outlet></router-outlet>\n<app-footer></app-footer>\n"},Cd9f:function(e,n,t){"use strict";var i=t("3j3K"),a=t("5oXY"),s=t("Q4XH"),o=t("Z/Pk"),r=t("Gy1P"),l=t("R9go"),c=t("1hHk"),d=t("LKwb"),p=t("cTdg");t.d(n,"a",function(){return m});var u=this&&this.__decorate||function(e,n,t,i){var a,s=arguments.length,o=s<3?n:null===i?i=Object.getOwnPropertyDescriptor(n,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,n,t,i);else for(var r=e.length-1;r>=0;r--)(a=e[r])&&(o=(s<3?a(o):s>3?a(n,t,o):a(n,t))||o);return s>3&&o&&Object.defineProperty(n,t,o),o},h=[{path:"",component:s.a,children:[{path:"",pathMatch:"full",redirectTo:"introduction"},{path:"introduction",component:o.a},{path:"installation",component:r.a},{path:"releases/:name",component:l.a},{path:"commons-cli",component:c.a},{path:"commons-compress",component:d.a},{path:"commons-config",component:p.a}]}],m=function(){function e(){}return e}();m=u([t.i(i.b)({imports:[a.a.forRoot(h)],exports:[a.a]})],m)},Gy1P:function(e,n,t){"use strict";var i=t("3j3K"),a=t("qM4v");t.d(n,"a",function(){return r});var s=this&&this.__decorate||function(e,n,t,i){var a,s=arguments.length,o=s<3?n:null===i?i=Object.getOwnPropertyDescriptor(n,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,n,t,i);else for(var r=e.length-1;r>=0;r--)(a=e[r])&&(o=(s<3?a(o):s>3?a(n,t,o):a(n,t))||o);return s>3&&o&&Object.defineProperty(n,t,o),o},o=this&&this.__metadata||function(e,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,n)},r=function(){function e(e){this.releaseService=e}return e.prototype.ngOnInit=function(){var e=this;this.releaseService.getLatestRelease().then(function(n){e.release=n}),ga("create","UA-52727032-2","auto"),ga("send","pageview")},e}();r=s([t.i(i._11)({selector:"app-installation",template:t("Wq6P")}),o("design:paramtypes",["function"==typeof(l=void 0!==a.a&&a.a)&&l||Object])],r);var l},Iksp:function(e,n,t){"use strict";var i=t("Qbdm"),a=t("3j3K"),s=t("Cd9f"),o=t("YWx4"),r=t("3avZ"),l=t("+XEq"),c=t("dqji"),d=t("Q4XH"),p=t("Z/Pk"),u=t("Gy1P"),h=t("R9go"),m=t("xu13"),f=t("1hHk"),g=t("LKwb"),v=t("cTdg"),b=t("qM4v"),w=t("fyjU");t.d(n,"a",function(){return k});var y=this&&this.__decorate||function(e,n,t,i){var a,s=arguments.length,o=s<3?n:null===i?i=Object.getOwnPropertyDescriptor(n,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,n,t,i);else for(var r=e.length-1;r>=0;r--)(a=e[r])&&(o=(s<3?a(o):s>3?a(n,t,o):a(n,t))||o);return s>3&&o&&Object.defineProperty(n,t,o),o},k=function(){function e(){}return e}();k=y([t.i(a.b)({declarations:[o.a,r.a,l.a,c.a,d.a,p.a,u.a,h.a,m.a,f.a,g.a,v.a],imports:[i.a,s.a],providers:[b.a,w.a],bootstrap:[o.a]})],k)},LKwb:function(e,n,t){"use strict";var i=t("3j3K"),a=t("fyjU");t.d(n,"a",function(){return r});var s=this&&this.__decorate||function(e,n,t,i){var a,s=arguments.length,o=s<3?n:null===i?i=Object.getOwnPropertyDescriptor(n,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,n,t,i);else for(var r=e.length-1;r>=0;r--)(a=e[r])&&(o=(s<3?a(o):s>3?a(n,t,o):a(n,t))||o);return s>3&&o&&Object.defineProperty(n,t,o),o},o=this&&this.__metadata||function(e,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,n)},r=function(){function e(e){this.compressFileTypeService=e}return e.prototype.ngOnInit=function(){var e=this;this.compressFileTypeService.getCompressFileTypes().then(function(n){e.compressFileTypes=n})},e.prototype.ngAfterViewInit=function(){$("pre code").each(function(e,n){hljs.highlightBlock(n)}),ga("create","UA-52727032-2","auto"),ga("send","pageview")},e.prototype.getFileType=function(e){return this.compressFileTypes.find(function(n){return n.fileType==e})},e}();r=s([t.i(i._11)({selector:"app-compress",template:t("cPF+")}),o("design:paramtypes",["function"==typeof(l=void 0!==a.a&&a.a)&&l||Object])],r);var l},MOVZ:function(e,n){function t(e){throw new Error("Cannot find module '"+e+"'.")}t.keys=function(){return[]},t.resolve=t,e.exports=t,t.id="MOVZ"},Q4XH:function(e,n,t){"use strict";var i=t("3j3K");t.d(n,"a",function(){return s});var a=this&&this.__decorate||function(e,n,t,i){var a,s=arguments.length,o=s<3?n:null===i?i=Object.getOwnPropertyDescriptor(n,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,n,t,i);else for(var r=e.length-1;r>=0;r--)(a=e[r])&&(o=(s<3?a(o):s>3?a(n,t,o):a(n,t))||o);return s>3&&o&&Object.defineProperty(n,t,o),o},s=function(){function e(){}return e}();s=a([t.i(i._11)({selector:"app-home",template:t("ljLh")})],s)},R9go:function(e,n,t){"use strict";var i=t("uCY4"),a=(t.n(i),t("3j3K")),s=t("5oXY"),o=t("qM4v");t.d(n,"a",function(){return c});var r=this&&this.__decorate||function(e,n,t,i){var a,s=arguments.length,o=s<3?n:null===i?i=Object.getOwnPropertyDescriptor(n,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,n,t,i);else for(var r=e.length-1;r>=0;r--)(a=e[r])&&(o=(s<3?a(o):s>3?a(n,t,o):a(n,t))||o);return s>3&&o&&Object.defineProperty(n,t,o),o},l=this&&this.__metadata||function(e,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,n)},c=function(){function e(e,n){this.releaseService=e,this.route=n}return e.prototype.ngOnInit=function(){var e=this;this.route.params.switchMap(function(n){return e.releaseService.getRelease(n.name)}).subscribe(function(n){e.release=n}),ga("create","UA-52727032-2","auto"),ga("send","pageview")},e}();c=r([t.i(a._11)({selector:"app-releases",template:t("1zB3")}),l("design:paramtypes",["function"==typeof(d=void 0!==o.a&&o.a)&&d||Object,"function"==typeof(p=void 0!==s.b&&s.b)&&p||Object])],c);var d,p},SENk:function(e,n){e.exports='\x3c!-- Mobile Navigation --\x3e\n<div id="offcanvas-nav" class="uk-offcanvas">\n\t<div class="uk-offcanvas-bar">\n\t\t<app-nav [clazz]="\'uk-nav uk-nav-offcanvas uk-nav-parent-icon\'"></app-nav>\n\t</div>\n</div>\n\n<nav class="uk-navbar uk-visible-small">\n\t<ul id="top" class="uk-navbar-nav">\n\t\t<a class="uk-navbar-toggle" data-uk-offcanvas="{target: \'#offcanvas-nav\'}"></a>\n\t</ul>\n\t<div class="uk-navbar-content">\n\t\t<img src="assets/images/icon_32.png" />\n\t\t<code class="uk-text-large">commons</code>\n\t</div>\n\t<div class="uk-navbar-flip">\n\t\t<ul class="uk-navbar-nav">\n\t\t\t<ul class="uk-navbar-nav">\n\t\t\t\t<li>\n\t\t\t\t\t<a href="http://alanbuttars.com" target="_blank">Author</a>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</ul>\n\t</div>\n</nav>\n\n<nav id="nav" class="uk-navbar uk-hidden-small">\n\t<div class="uk-container uk-margin-small">\n\t\t<ul id="top" class="uk-navbar-nav">\n\t\t\t<li>\n\t\t\t\t<a href="javascript:;">\n\t\t\t\t\t<img src="assets/images/icon_32.png" />\n\t\t\t\t\t<code class="uk-text-large">commons</code>\n\t\t\t\t</a>\n\t\t\t</li>\n\t\t</ul>\n\n\t\t<div class="uk-navbar-flip">\n\t\t\t<ul class="uk-navbar-nav">\n\t\t\t\t<li>\n\t\t\t\t\t<a href="http://alanbuttars.com" target="_blank">Author</a>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</div>\n\t</div>\n</nav>\n'},VNxr:function(e,n){e.exports='<article class="uk-article">\n  <h1 class="uk-article-title">\n    Introduction\n  </h1>\n\n  <p class="uk-article-lead">\n    Commons is a collection of Java libraries which encompass popular web application tasks. Among the included modules are:\n  </p>\n  <dl class="uk-article-lead uk-description-list-horizontal">\n    <dt>commons-cli</dt>\n    <dd>Deploy command-line processes and interpret their success</dd>\n\n    <dt>commons-compress</dt>\n    <dd>Compress and decompress files and archives using 16 different file types</dd>\n\n    <dt>commons-config</dt>\n    <dd>Wrap your configuration files in simple objects which respond to file changes</dd>\n  </dl>\n\n  <p>\n    GitHub source: <a href="https://github.com/alanbuttars/commons-java/tree/master/" target="_blank">https://github.com/alanbuttars/commons-java/tree/master/</a>.\n  </p>\n\n  <hr/>\n\n  <h2>Design</h2>\n  <p>\n    In order to merit inclusion in the project, functionality must meet a handful of criteria:\n  </p>\n  <ol>\n    <li>Is the functionality used in the majority of Java web applications?</li>\n    <li>Is the functionality independent of any specific framework?</li>\n  </ol>\n\n  <p>\n    Functionality is written with the following goals in mind:\n  </p>\n  <ol>\n    <li>Setup should be minimal. Users should be able to plug and play.</li>\n    <li>Configuration should be easy. There should only be one, simple way to deviate from default behavior.</li>\n    <li>Syntax should be intuitive. On all appropriate occasions seek to emulate human language.</li>\n  </ol>\n\n  <hr/>\n\n  <h2>Contribute</h2>\n  <p>\n    All feature requests, bug reports, and pull requests may be filed through the GitHub page:\n  </p>\n  <dl class="uk-description-list-horizontal">\n    <dt>Feature requests</dt>\n    <dd><a href="https://github.com/alanbuttars/commons-java/issues/new">https://github.com/alanbuttars/commons-java/issues/new</a></dd>\n\n    <dt>Bug reports</dt>\n    <dd><a href="https://github.com/alanbuttars/commons-java/issues/new">https://github.com/alanbuttars/commons-java/issues/new</a></dd>\n\n    <dt>Pull requests</dt>\n    <dd><a href="https://github.com/alanbuttars/commons-java/pulls">https://github.com/alanbuttars/commons-java/pulls</a></dd>\n  </dl>\n\n</article>\n'},Wq6P:function(e,n){e.exports='<div *ngIf="release">\n  <article class="uk-article">\n    <h1 class="uk-article-title">\n      Installation\n    </h1>\n\n    <p class="uk-article-lead">\n      All Commons modules may be installed via Maven or by manually downloading the JAR.\n    </p>\n\n    <hr/>\n    \n    <app-release [release]="release"></app-release>\n  </article>\n</div>\n'},YWx4:function(e,n,t){"use strict";var i=t("3j3K");t.d(n,"a",function(){return s});var a=this&&this.__decorate||function(e,n,t,i){var a,s=arguments.length,o=s<3?n:null===i?i=Object.getOwnPropertyDescriptor(n,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,n,t,i);else for(var r=e.length-1;r>=0;r--)(a=e[r])&&(o=(s<3?a(o):s>3?a(n,t,o):a(n,t))||o);return s>3&&o&&Object.defineProperty(n,t,o),o},s=function(){function e(){}return e}();s=a([t.i(i._11)({selector:"app-root",template:t("5xMp")})],s)},"Z/Pk":function(e,n,t){"use strict";var i=t("3j3K");t.d(n,"a",function(){return s});var a=this&&this.__decorate||function(e,n,t,i){var a,s=arguments.length,o=s<3?n:null===i?i=Object.getOwnPropertyDescriptor(n,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,n,t,i);else for(var r=e.length-1;r>=0;r--)(a=e[r])&&(o=(s<3?a(o):s>3?a(n,t,o):a(n,t))||o);return s>3&&o&&Object.defineProperty(n,t,o),o},s=function(){function e(){}return e.prototype.ngOnInit=function(){ga("create","UA-52727032-2","auto"),ga("send","pageview")},e}();s=a([t.i(i._11)({selector:"app-introuduction",template:t("VNxr")})],s)},"cPF+":function(e,n){e.exports='<div class="uk-grid">\n  <div class="uk-width-1-1 uk-width-medium-3-5 uk-width-large-3-4">\n    <article class="uk-article">\n      <h1 class="uk-article-title">\n        <code>commons-compress</code>\n      </h1>\n\n      <p class="uk-article-lead">\n        The <a href="https://commons.apache.org/proper/commons-compress/index.html">Apache Commons Compress project</a> is a powerful API supporting\n        compression and decompression actions on a bunch of different file types. This library attempts to make that API very simple to use without sacrificing its extensibility.\n      </p>\n\n      <p>\n        GitHub source: <a href="https://github.com/alanbuttars/commons-java/tree/master/commons-compress" target="_blank">https://github.com/alanbuttars/commons-java/tree/master/commons-compress</a>.\n      </p>\n\n      <hr/>\n\n      <h2 id="supported">Supported file types</h2>\n      <p>\n        The following file types are supported by this API:\n      </p>\n      <table class="uk-table">\n        <thead>\n          <tr>\n            <th>File type</th>\n            <th>Category</th>\n            <th>Compression</th>\n            <th>Decompression</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor="let compressFileType of compressFileTypes">\n            <td>{{compressFileType.fileType}}</td>\n            <td>{{compressFileType.category}}</td>\n            <td>\n              <i *ngIf="compressFileType.compression" class="uk-icon-check"></i>\n            </td>\n            <td>\n              <i *ngIf="compressFileType.decompression" class="uk-icon-check"></i>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n\n      <hr/>\n\n      <h2 id="7z">7z</h2>\n      <p>\n        See <a href="https://en.wikipedia.org/wiki/7z">https://en.wikipedia.org/wiki/7z</a>.\n      </p>\n      <ul class="uk-tab" data-uk-tab="{connect: \'#tab-7z\'}">\n        <li><a href="">Compression</a></li>\n        <li><a href="">Decompression</a></li>\n      </ul>\n      <ul id="tab-7z" class="uk-switcher">\n        <li>\n          <pre><code class="java">\nFile source = new File("test");\nFile destination = new File("test.7z");\nCompress.directory(source).with7z().to(destination);\n\nList<? extends SevenZMethodConfiguration> contentMethods = Collections.singletonList(new SevenZMethodConfiguration(SevenZMethod.LZMA));\nCompress.directory(source).with7z().andContentMethods(contentMethods).to(destination);\n          </code></pre>\n        </li>\n        <li>\n          <pre><code class="java">\nFile source = new File("test.7z");\nFile destination = new File("test");\nDecompress.archive(source).with7z().to(destination);\n\nDecompress.archive(source).with7z()//\n  .andDecryptWithPassword("password123!".getBytes())//\n  .to(destination);\n          </code></pre>\n        </li>\n      </ul>\n\n      <hr/>\n\n      <h2 id="ar">ar</h2>\n      <p>\n        See <a href="https://en.wikipedia.org/wiki/Ar_(Unix)">https://en.wikipedia.org/wiki/Ar_(Unix)</a>.\n      </p>\n      <ul class="uk-tab" data-uk-tab="{connect: \'#tab-ar\'}">\n        <li><a href="">Compression</a></li>\n        <li><a href="">Decompression</a></li>\n      </ul>\n      <ul id="tab-ar" class="uk-switcher">\n        <li>\n          <pre><code class="java">\nFile source = new File("test");\nFile destination = new File("test.a");\nCompress.directory(source).withAr().to(destination);\n\nCompress.directory(source).withAr()//\n  .andGroupId(0)//\n  .andUserId(0)//\n  .andLongFileMode(ArArchiveOutputStream.LONGFILE_ERROR)//\n  .andMode(33188)//\n  .to(destination);\n          </code></pre>\n        </li>\n        <li>\n          <pre><code class="java">\nFile source = new File("test.a");\nFile destination = new File("test");\nDecompress.archive(source).withAr().to(destination);\n          </code></pre>\n        </li>\n      </ul>\n\n      <hr/>\n\n      <h2 id="arj">arj</h2>\n      <p>\n        See <a href="https://en.wikipedia.org/wiki/ARJ">https://en.wikipedia.org/wiki/ARJ</a>.\n      </p>\n      <ul class="uk-tab" data-uk-tab="{connect: \'#tab-arj\'}">\n        <li><a href="">Decompression</a></li>\n      </ul>\n      <ul id="tab-arj" class="uk-switcher">\n        <li>\n          <pre><code class="java">\nFile source = new File("test.arj");\nFile destination = new File("test");\nDecompress.archive(source).withArj().to(destination);\n\nDecompress.archive(source).withArj().andEncoding("UTF16").to(destination);\n          </code></pre>\n        </li>\n      </ul>\n\n      <hr/>\n\n      <h2 id="bzip2">bzip2</h2>\n      <p>\n        See <a href="https://en.wikipedia.org/wiki/Bzip2">https://en.wikipedia.org/wiki/Bzip2</a>.\n      </p>\n      <ul class="uk-tab" data-uk-tab="{connect: \'#tab-bzip2\'}">\n        <li><a href="">Compression</a></li>\n        <li><a href="">Decompression</a></li>\n      </ul>\n      <ul id="tab-bzip2" class="uk-switcher">\n        <li>\n          <pre><code class="java">\nFile source = new File("test.txt");\nFile destination = new File("test.txt.bz2");\nCompress.file(source).withBzip2().to(destination);\n\nCompress.file(source).withBzip2()//\n  .andBlockSize(BZip2Constants.MIN_BLOCKSIZE)//\n  .to(destination);\n          </code></pre>\n        </li>\n        <li>\n          <pre><code class="java">\nFile source = new File("test.txt.bz2");\nFile destination = new File("test.txt");\nDecompress.compressedFile(source).withBzip2().to(destination);\n\nDecompress.compressedFile(source).withBzip2()//\n  .andDecompressConcatenated(true)//\n  .to(destination);\n          </code></pre>\n        </li>\n      </ul>\n\n      <hr/>\n\n      <h2 id="cpio">cpio</h2>\n      <p>\n        See <a href="https://en.wikipedia.org/wiki/Cpio">https://en.wikipedia.org/wiki/Cpio</a>.\n      </p>\n      <ul class="uk-tab" data-uk-tab="{connect: \'#tab-cpio\'}">\n        <li><a href="">Compression</a></li>\n        <li><a href="">Decompression</a></li>\n      </ul>\n      <ul id="tab-cpio" class="uk-switcher">\n        <li>\n          <pre><code class="java">\nFile source = new File("test");\nFile destination = new File("test.cpio");\nCompress.directory(source).withCpio().to(destination);\n\nCompress.directory(source).withCpio()//\n  .andBlockSize(CpioConstants.BLOCK_SIZE)//\n  .andEncoding(CharsetNames.UTF_16)//\n  .andFormat(CpioConstants.FORMAT_NEW_CRC)//\n  .to(destination);\n          </code></pre>\n        </li>\n        <li>\n          <pre><code class="java">\nFile source = new File("test.txt.cpio");\nFile destination = new File("test.txt");\nDecompress.archive(source).withCpio().to(destination);\n\nDecompress.archive(source).withCpio()//\n  .andBlockSize(CpioConstants.BLOCK_SIZE)//\n  .andEncoding(CharsetNames.UTF_16)//\n  .to(destination);\n          </code></pre>\n        </li>\n      </ul>\n\n      <hr/>\n\n      <h2 id="deflate">deflate</h2>\n      <p>\n        See <a href="https://en.wikipedia.org/wiki/DEFLATE">https://en.wikipedia.org/wiki/DEFLATE</a>.\n      </p>\n      <ul class="uk-tab" data-uk-tab="{connect: \'#tab-deflate\'}">\n        <li><a href="">Compression</a></li>\n        <li><a href="">Decompression</a></li>\n      </ul>\n      <ul id="tab-deflate" class="uk-switcher">\n        <li>\n          <pre><code class="java">\nFile source = new File("test.txt");\nFile destination = new File("test.txt.deflate");\nCompress.file(source).withDeflate().to(destination);\n\nCompress.file(source).withDeflate()//\n  .andParameters(new DeflateParameters())//\n  .to(destination);\n          </code></pre>\n        </li>\n        <li>\n          <pre><code class="java">\nFile source = new File("test.txt.deflate");\nFile destination = new File("test.txt");\nDecompress.compressedFile(source).withDeflate().to(destination);\n\nDecompress.compressedFile(source).withDeflate()//\n  .andParameters(new DeflateParameters())//\n  .to(destination);\n          </code></pre>\n        </li>\n      </ul>\n\n      <hr/>\n\n      <h2 id="dump">dump</h2>\n      <p>\n        See <a href="https://en.wikipedia.org/wiki/Dump_(program)">https://en.wikipedia.org/wiki/Dump_(program)</a>.\n      </p>\n      <ul class="uk-tab" data-uk-tab="{connect: \'#tab-dump\'}">\n        <li><a href="">Decompression</a></li>\n      </ul>\n      <ul id="tab-dump" class="uk-switcher">\n        <li>\n          <pre><code class="java">\nFile source = new File("test.dump");\nFile destination = new File("test");\nDecompress.archive(source).withDump().to(destination);\n\nDecompress.archive(source).withDump().andEncoding("UTF16").to(destination);\n          </code></pre>\n        </li>\n      </ul>\n\n      <hr/>\n\n      <h2 id="gzip">gzip</h2>\n      <p>\n        See <a href="https://en.wikipedia.org/wiki/Gzip">https://en.wikipedia.org/wiki/Gzip</a>.\n      </p>\n      <ul class="uk-tab" data-uk-tab="{connect: \'#tab-gzip\'}">\n        <li><a href="">Compression</a></li>\n        <li><a href="">Decompression</a></li>\n      </ul>\n      <ul id="tab-gzip" class="uk-switcher">\n        <li>\n          <pre><code class="java">\nFile source = new File("test.txt");\nFile destination = new File("test.txt.gz");\nCompress.file(source).withGzip().to(destination);\n\nCompress.file(source).withGzip()//\n  .andParameters(new GzipParameters())//\n  .to(destination);\n          </code></pre>\n        </li>\n        <li>\n          <pre><code class="java">\nFile source = new File("test.txt.gz");\nFile destination = new File("test.txt");\nDecompress.compressedFile(source).withGzip().to(destination);\n\nDecompress.compressedFile(source).withGzip()//\n  .andDecompressConcatenated(true)//\n  .to(destination);\n          </code></pre>\n        </li>\n      </ul>\n\n      <hr/>\n\n      <h2 id="jar">jar</h2>\n      <p>\n        See <a href="https://en.wikipedia.org/wiki/JAR_(file_format)">https://en.wikipedia.org/wiki/JAR_(file_format)</a>.\n      </p>\n      <ul class="uk-tab" data-uk-tab="{connect: \'#tab-jar\'}">\n        <li><a href="">Compression</a></li>\n        <li><a href="">Decompression</a></li>\n      </ul>\n      <ul id="tab-jar" class="uk-switcher">\n        <li>\n          <pre><code class="java">\nFile source = new File("test");\nFile destination = new File("test.jar");\nCompress.directory(source).withJar().to(destination);\n\nCompress.directory(source).withJar()//\n  .andComment("Java package comment")//\n  .andEncoding("UTF16")//\n  .andFallbackToUTF8(false)//\n  .andLevel(ZipArchiveOutputStream.DEFAULT_COMPRESSION)//\n  .andMethod(ZipEntry.DEFLATED)//\n  .andUnicodeExtraFieldPolicy(UnicodeExtraFieldPolicy.ALWAYS)//\n  .andUseLanguageEncoding(true)//\n  .andZip64Mode(Zip64Mode.ALWAYS)//\n  .to(destination);\n          </code></pre>\n        </li>\n        <li>\n          <pre><code class="java">\nFile source = new File("test.jar");\nFile destination = new File("test");\nDecompress.archive(source).withJar().to(destination);\n\nDecompress.archive(source).withJar()//\n  .andEncoding("UTF16")//\n  .to(destination);\n          </code></pre>\n        </li>\n      </ul>\n\n      <hr/>\n\n      <h2 id="lzma">lzma</h2>\n      <p>\n        See <a href="https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Markov_chain_algorithm">https://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Markov_chain_algorithm</a>.\n      </p>\n      <ul class="uk-tab" data-uk-tab="{connect: \'#tab-lzma\'}">\n        <li><a href="">Compression</a></li>\n        <li><a href="">Decompression</a></li>\n      </ul>\n      <ul id="tab-lzma" class="uk-switcher">\n        <li>\n          <pre><code class="java">\nFile source = new File("test.txt");\nFile destination = new File("test.txt.lzma");\nCompress.file(source).withLzma().to(destination);\n          </code></pre>\n        </li>\n        <li>\n          <pre><code class="java">\nFile source = new File("test.txt.lzma");\nFile destination = new File("test.txt");\nDecompress.compressedFile(source).withLzma().to(destination);\n          </code></pre>\n        </li>\n      </ul>\n\n      <hr/>\n\n      <h2 id="pack200">pack200</h2>\n      <p>\n        See <a href="https://en.wikipedia.org/wiki/Pack200">https://en.wikipedia.org/wiki/Pack200</a>.\n      </p>\n      <ul class="uk-tab" data-uk-tab="{connect: \'#tab-pack200\'}">\n        <li><a href="">Compression</a></li>\n        <li><a href="">Decompression</a></li>\n      </ul>\n      <ul id="tab-pack200" class="uk-switcher">\n        <li>\n          <pre><code class="java">\nFile source = new File("test.txt");\nFile destination = new File("test.txt.pack");\nCompress.file(source).withPack200().to(destination);\n\nCompress.file(source).withPack200()//\n  .andMode(Pack200Strategy.TEMP_FILE)//\n  .andProperties(new HashMap&lt;String, String&gt;())//\n  .to(destination);\n          </code></pre>\n        </li>\n        <li>\n          <pre><code class="java">\nFile source = new File("test.txt.pack");\nFile destination = new File("test.txt");\nDecompress.compressedFile(source).withPack200().to(destination);\n\nDecompress.compressedFile(source).withPack200()//\n  .andMode(Pack200Strategy.TEMP_FILE)//\n  .andProperties(new HashMap&lt;String, String&gt;())//\n  .to(destination);\n          </code></pre>\n        </li>\n      </ul>\n\n      <hr/>\n\n      <h2 id="snappy">snappy</h2>\n      <p>\n        See <a href="https://en.wikipedia.org/wiki/Snappy_(compression)">https://en.wikipedia.org/wiki/Snappy_(compression)</a>.\n      </p>\n      <ul class="uk-tab" data-uk-tab="{connect: \'#tab-snappy\'}">\n        <li><a href="">Decompression (standard snappy)</a></li>\n        <li><a href="">Decompression (framed snappy)</a></li>\n      </ul>\n      <ul id="tab-snappy" class="uk-switcher">\n        <li>\n          <pre><code class="java">\nFile source = new File("test.txt.sz");\nFile destination = new File("test.txt");\nDecompress.compressedFile(source).withSnappy().to(destination);\n\nDecompress.compressedFile(source).withSnappy()//\n  .andBlockSize(SnappyCompressorInputStream.DEFAULT_BLOCK_SIZE)//\n  .to(destination);\n          </code></pre>\n        </li>\n        <li>\n          <pre><code class="java">\nFile source = new File("test.txt.sz");\nFile destination = new File("test.txt");\nFramedSnappyDialect dialect = FramedSnappyDialect.IWORK_ARCHIVE;\nDecompress.compressedFile(source).withFramedSnappy()//\n  .andDialect(FramedSnappyDialect.IWORK_ARCHIVE)//\n  .to(destination);\n          </code></pre>\n        </li>\n      </ul>\n\n      <hr/>\n\n      <h2 id="tar">tar</h2>\n      <p>\n        See <a href="https://en.wikipedia.org/wiki/Tar_(computing)">https://en.wikipedia.org/wiki/Tar_(computing)</a>.\n      </p>\n      <ul class="uk-tab" data-uk-tab="{connect: \'#tab-tar\'}">\n        <li><a href="">Compression</a></li>\n        <li><a href="">Decompression</a></li>\n      </ul>\n      <ul id="tab-tar" class="uk-switcher">\n        <li>\n          <pre><code class="java">\nFile source = new File("test");\nFile destination = new File("test.tar");\nCompress.directory(source).withTar().to(destination);\n\nCompress.directory(source).withTar()//\n  .andAddPaxHeadersForNonAsciiNames(true)//\n  .andBigNumberMode(TarArchiveOutputStream.BIGNUMBER_ERROR)//\n  .andBlockSize(TarConstants.DEFAULT_BLKSIZE)//\n  .andEncoding("UTF8")//\n  .andLongFileMode(TarArchiveOutputStream.LONGFILE_ERROR)//\n  .andPreserveLeadingSlashes(true)//\n  .andRecordSize(TarConstants.DEFAULT_RCDSIZE)//\n  .to(destination);\n          </code></pre>\n        </li>\n        <li>\n          <pre><code class="java">\nFile source = new File("test.tar");\nFile destination = new File("test");\nDecompress.archive(source).withTar()//\n  .andBlockSize(TarConstants.DEFAULT_BLKSIZE)//\n  .andEncoding("UTF8")//\n  .andRecordSize(TarConstants.DEFAULT_RCDSIZE)//\n  .to(destination);\n          </code></pre>\n        </li>\n      </ul>\n\n      <hr/>\n\n      <h2 id="xz">xz</h2>\n      <p>\n        See <a href="https://en.wikipedia.org/wiki/Xz">https://en.wikipedia.org/wiki/Xz</a>.\n      </p>\n      <ul class="uk-tab" data-uk-tab="{connect: \'#tab-xz\'}">\n        <li><a href="">Compression</a></li>\n        <li><a href="">Decompression</a></li>\n      </ul>\n      <ul id="tab-xz" class="uk-switcher">\n        <li>\n          <pre><code class="java">\nFile source = new File("test.txt");\nFile destination = new File("test.txt.xz");\nCompress.file(source).withXz().to(destination);\n\nCompress.file(source).withXz().andPreset(LZMA2Options.PRESET_MAX).to(destination);\n          </code></pre>\n        </li>\n        <li>\n          <pre><code class="java">\nFile source = new File("test.txt.xz");\nFile destination = new File("test.txt");\nDecompress.compressedFile(source).withXz().to(destination);\n\nDecompress.compressedFile(source).withXz().andDecompressConcatenated(true).to(destination);\n          </code></pre>\n        </li>\n      </ul>\n\n      <hr/>\n\n      <h2 id="z">z</h2>\n      <p>\n        See <a href="https://en.wikipedia.org/wiki/Compress">https://en.wikipedia.org/wiki/Compress</a>.\n      </p>\n      <ul class="uk-tab" data-uk-tab="{connect: \'#tab-z\'}">\n        <li><a href="">Decompression</a></li>\n      </ul>\n      <ul id="tab-z" class="uk-switcher">\n        <li>\n          <pre><code class="java">\nFile source = new File("test.txt.z");\nFile destination = new File("test.txt");\nDecompress.compressedFile(source).withZ().to(destination);\n          </code></pre>\n        </li>\n      </ul>\n\n      <hr/>\n\n      <h2 id="zip">zip</h2>\n      <p>\n        See <a href="https://en.wikipedia.org/wiki/Zip_(file_format)">https://en.wikipedia.org/wiki/Zip_(file_format)</a>.\n      </p>\n      <ul class="uk-tab" data-uk-tab="{connect: \'#tab-zip\'}">\n        <li><a href="">Compression</a></li>\n        <li><a href="">Decompression</a></li>\n      </ul>\n      <ul id="tab-zip" class="uk-switcher">\n        <li>\n          <pre><code class="java">\nFile source = new File("test");\nFile destination = new File("test.zip");\nCompress.directory(source).withZip().to(destination);\n\nCompress.directory(source).withZip()//\n  .andComment("Java package comment")//\n  .andEncoding("UTF16")//\n  .andFallbackToUTF8(false)//\n  .andLevel(ZipArchiveOutputStream.DEFAULT_COMPRESSION)//\n  .andMethod(ZipEntry.DEFLATED)//\n  .andUnicodeExtraFieldPolicy(UnicodeExtraFieldPolicy.ALWAYS)//\n  .andUseLanguageEncoding(true)//\n  .andZip64Mode(Zip64Mode.ALWAYS)//\n  .to(destination);\n          </code></pre>\n        </li>\n        <li>\n          <pre><code class="java">\nFile source = new File("test.zip");\nFile destination = new File("test");\nDecompress.archive(source).withZip().to(destination);\n\nDecompress.archive(source).withZip()//\n  .andAllowStoredEntriesWithDataDescriptor(false)//\n  .andEncoding("UTF16")//\n  .andUseUnicodeExtraFields(false)//\n  .to(destination);\n          </code></pre>\n        </li>\n      </ul>\n\n    </article>\n  </div>\n\n  <div class="uk-hidden-small uk-width-medium-2-5 uk-width-large-1-4">\n    <div data-uk-sticky="{top: 10}">\n      <ul class="uk-nav uk-nav-side" data-uk-scrollspy-nav="{closest: \'li\', smoothscroll: true, cls: \'uk-active\'}">\n        <li><a href="#supported">Supported file types</a></li>\n        <li *ngFor="let compressFileType of compressFileTypes">\n          <a href="#{{compressFileType.fileType}}">{{compressFileType.fileType}}</a>\n        </li>\n      </ul>\n    </div>\n  </div>\n</div>\n'},cTdg:function(e,n,t){"use strict";var i=t("3j3K");t.d(n,"a",function(){return s});var a=this&&this.__decorate||function(e,n,t,i){var a,s=arguments.length,o=s<3?n:null===i?i=Object.getOwnPropertyDescriptor(n,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,n,t,i);else for(var r=e.length-1;r>=0;r--)(a=e[r])&&(o=(s<3?a(o):s>3?a(n,t,o):a(n,t))||o);return s>3&&o&&Object.defineProperty(n,t,o),o},s=function(){function e(){}return e.prototype.ngAfterViewInit=function(){$("pre code").each(function(e,n){hljs.highlightBlock(n)}),ga("create","UA-52727032-2","auto"),ga("send","pageview")},e}();s=a([t.i(i._11)({selector:"app-config",template:t("h6fP")})],s)},dqji:function(e,n,t){"use strict";var i=t("3j3K"),a=t("qM4v");t.d(n,"a",function(){return r});var s=this&&this.__decorate||function(e,n,t,i){var a,s=arguments.length,o=s<3?n:null===i?i=Object.getOwnPropertyDescriptor(n,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,n,t,i);else for(var r=e.length-1;r>=0;r--)(a=e[r])&&(o=(s<3?a(o):s>3?a(n,t,o):a(n,t))||o);return s>3&&o&&Object.defineProperty(n,t,o),o},o=this&&this.__metadata||function(e,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,n)},r=function(){function e(e){this.releaseService=e}return e.prototype.ngOnInit=function(){var e=this;this.releaseService.getReleases().then(function(n){e.releases=n})},e}();s([t.i(i.n)(),o("design:type",String)],r.prototype,"clazz",void 0),r=s([t.i(i._11)({selector:"app-nav",template:t("peM0")}),o("design:paramtypes",["function"==typeof(l=void 0!==a.a&&a.a)&&l||Object])],r);var l},f6ft:function(e,n){e.exports='<div class="uk-container">\n  <p>&copy; {{formattedYear}} Alan Buttars. All rights reserved.</p>\n</div>\n'},fyjU:function(e,n,t){"use strict";var i=t("3j3K");t.d(n,"a",function(){return o});var a=this&&this.__decorate||function(e,n,t,i){var a,s=arguments.length,o=s<3?n:null===i?i=Object.getOwnPropertyDescriptor(n,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,n,t,i);else for(var r=e.length-1;r>=0;r--)(a=e[r])&&(o=(s<3?a(o):s>3?a(n,t,o):a(n,t))||o);return s>3&&o&&Object.defineProperty(n,t,o),o},s=[{fileType:"7z",category:"archive",compression:!0,decompression:!0},{fileType:"ar",category:"archive",compression:!0,decompression:!0},{fileType:"arj",category:"archive",compression:!1,decompression:!0},{fileType:"bzip2",category:"compressed file",compression:!0,decompression:!0},{fileType:"cpio",category:"archive",compression:!0,decompression:!0},{fileType:"deflate",category:"compressed file",compression:!0,decompression:!0},{fileType:"dump",category:"archive",compression:!1,decompression:!0},{fileType:"gzip",category:"compressed file",compression:!0,decompression:!0},{fileType:"jar",category:"archive",compression:!0,decompression:!0},{fileType:"lzma",category:"compressed file",compression:!0,decompression:!0},{fileType:"pack200",category:"compressed file",compression:!0,decompression:!0},{fileType:"snappy",category:"compressed file",compression:!1,decompression:!0},{fileType:"tar",category:"archive",compression:!0,decompression:!0},{fileType:"xz",category:"compressed file",compression:!0,decompression:!0},{fileType:"z",category:"compressed file",compression:!1,decompression:!0},{fileType:"zip",category:"archive",compression:!0,decompression:!0}],o=function(){function e(){}return e.prototype.getCompressFileTypes=function(){return Promise.resolve(s)},e}();o=a([t.i(i.c)()],o)},h6fP:function(e,n){e.exports='<div class="uk-grid">\n  <div class="uk-width-1-1 uk-width-medium-3-5 uk-width-large-3-4">\n    <article class="uk-article">\n      <h1 class="uk-article-title">\n        <code>commons-config</code>\n      </h1>\n\n      <p class="uk-article-lead">\n        Almost every project requires configurations, and those configurations sometimes require tweaking. Wouldn\'t it be nice to deploy\n        your application, then adjust configurations and watch them affect the application on the fly? That\'s what the commons-config module\n        tries to accomplish. Setup is basic:\n      </p>\n      <ul class="uk-article-lead">\n        <li>Define a master YAML file which specifies all configuration files used in your application</li>\n        <li>At application startup, build objects referencing those configuration files</li>\n        <li>Use those configuration objects throughout your code</li>\n      </ul>\n      <p class="uk-article-lead">\n        If one of the configuration files specified in your master YAML (or the master YAML itself) is updated, the configuration object\n        associated with it is automatically updated. No redeploy is necessary, so there\'s no need to worry about application downtime!\n      </p>\n\n      <p>\n        GitHub source: <a href="https://github.com/alanbuttars/commons-java/tree/master/commons-config" target="_blank">https://github.com/alanbuttars/commons-java/tree/master/commons-config</a>.\n      </p>\n\n      <hr />\n\n      <h2 id="qs-yaml">Master YAML</h2>\n      <p>\n        The first step is to define a master YAML file. This file lists the other configuration files to watch and how often to poll them for updates.\n      </p>\n      <pre><code class="yaml makefile">\n# \'master\' refers to this file itself\nmaster:\n\n  # how often should we query this file for changes?\n  poll-every: 60\n\n  # time unit corresponding to above property\n  #   e.g., \'millseconds\', \'seconds\', \'minutes\', \'hours\'\n  poll-every-unit: \'seconds\'\n\n  # how many threads in the pool used to poll files?\n  pool-size: 10\n\n# \'files\' refers to the other configuration files to watch\nfiles:\n\n  # \'database\' is an alias that you define, describing the configuration\'s purpose\n  database:\n    file: \'/path/to/database.properties\'\n    poll-every: 30\n    poll-every-unit: \'seconds\'\n\n  admin-user:\n    file: \'/path/to/admin-user.json\'\n    poll-every: 5\n    poll-every-unit: \'minutes\'\n\n  page-permissions:\n    file: \'/path/to/page-permissions.xml\'\n    poll-every: 10\n    poll-every-unit: \'minutes\'\n\n  client-properties:\n    file: \'/path/to/clients/\'\n    poll-every: 6\n    poll-every-unit: \'hours\'\n      </code></pre>\n\n      <hr/>\n\n      <h2 id="qs-watch">Creating <code>Watch</code> singleton</h2>\n      <p>\n        The second step is to create a singleton instance of the <code>Watch</code> class when your application starts.\n        This class will manage polling for the files defined in your master YAML and will also allow you to create configuration objects.\n      </p>\n      <p>\n        There are two ways to create a <code>Watch</code>. Both which require your master YAML and an instance of the\n        <a href="https://github.com/google/guava/wiki/EventBusExplained">Google Guava EventBus</a>.\n      </p>\n\n      <ol>\n        <li>\n          <p>Set the master YAML file path in the <code>commons.config</code> system property</p>\n          <p>In your application startup code:</p>\n          <pre><code class="java">{{\'\npublic static void main(String[] args) {\n  Watch watch = Watch.config().withEventBus(new EventBusSyncImpl());\n}\n          \'}}</code></pre>\n\n          <p>Then deploy your application with the system property:</p>\n          <pre><code class="shell">\njava -Dcommons.config=/path/to/commons.config.yml -jar Application.jar\n          </code></pre>\n        </li>\n\n        <li>\n          <p>Set the master YAML file path in your code</p>\n          <p>In your application startup code:</p>\n          <pre><code class="java">{{\'\npublic static void main(String[] args) {\n  Watch watch = Watch.config("/path/to/commons.config.yml").withEventBus(new EventBusSyncImpl());\n}\n          \'}}</code></pre>\n        </li>\n      </ol>\n\n      <hr/>\n\n      <h2 id="qs-config">Creating configuration objects</h2>\n      <p>\n        Now that you have your <code>Watch</code> instance, you can use it to create singleton configuration objects that will last the duration of your\n        application\'s runtime. These configuration objects will automatically update themselves when their associated file is updated, so you never have\n        to worry about bouncing servers for a configuration update.\n      </p>\n      <p>\n        Here\'s a simple example of how to create these objects:\n      </p>\n\n      <pre><code class="java">{{\'\npublic class Configurations {\n\n  public static final ConfigurationPropertiesImpl database;\n  public static final ConfigurationJsonCollectionImpl&lt;List&lt;PagePermission&gt;&gt; pagePermissions;\n  public static final ConfigurationXmlImpl&lt;User&gt; adminUser;\n  public static final ConfigurationDirectoryImpl clientProperties;\n\n  static {\n    EventBus eventBus = new EventBusSyncImpl();\n    Watch watch = Watch.config().withEventBus(eventBus);\n\n    database = watch.properties("database");\n    adminUser = watch.xml("admin-user").mappedTo(User.class);\n    pagePermissions = watch.json("page-permissions").mappedTo(new TypeReference&lt;List&lt;PagePermission&gt;&gt;() {});\n    clientProperties = watch.directory("client-properties");\n  }\n}\n      \'}}</code></pre>\n\n      <hr/>\n\n      <h2 id="json">JSON configuration objects</h2>\n      <p>\n        If your JSON configuration file models a single object, you can map it to <code>ConfigurationJsonImpl</code>.\n      </p>\n      <p>\n        If your JSON configuration file models a collection of objects, you can map it to <code>ConfigurationJsonCollectionImpl</code>.\n      </p>\n\n      <ul class="uk-tab" data-uk-tab="{connect: \'#tab-json\'}">\n        <li><a href="">database.json</a></li>\n        <li><a href="">Database.java</a></li>\n        <li><a href="">credentials.json</a></li>\n        <li><a href="">Credentials.java</a></li>\n        <li><a href="">master.yml</a></li>\n        <li><a href="">Configurations.java</a></li>\n        <li><a href="">Application.java</a></li>\n      </ul>\n      <ul id="tab-json" class="uk-switcher">\n        <li>\n          <pre><code class="json">{{\'\n{\n  "db": "clients",\n  "host": "db.mydomain.com"\n}\n        \'}}</code></pre>\n        </li>\n        <li>\n          <pre><code class="java">{{\'\npublic class Database {\n  @JsonProperty("db")\n  private String database;\n  private String host;\n\n  public String getDatabase() { return database; }\n  public String getHost() { return host; }\n  public void setDatabase(String database) { this.database = database; }\n  public void setHost(String host) { this.host = host };\n}\n        \'}}</code></pre>\n        </li>\n        <li>\n          <pre><code class="json">{{\'\n[\n  {\n    "username": "admin",\n    "password": "adm1n_s3cr3t"\n  },\n  {\n    "username": "service_a",\n    "password": "s3rv1c3_a_s3cr3t"\n  },\n  {\n    "username": "service_b",\n    "password": "s3rv1c3_b_s3cr3t"\n  }\n]\n        \'}}</code></pre>\n        </li>\n        <li>\n          <pre><code class="java">{{\'\npublic class Credentials {\n  private String username;\n  private String password;\n\n  public String getUsername() { return username; }\n  public String getPassword() { return password; }\n  public void setUsername(String username) { this.username = username; }\n  public void setPassword(String password) { this.password = password; }\n}\n        \'}}</code></pre>\n        </li>\n        <li>\n          <pre><code class="yaml makefile">\nmaster:\n  poll-every: 60\n  poll-every-unit: \'seconds\'\n  pool-size: 10\n\nfiles:\n  db:\n    file: \'/path/to/database.json\'\n    poll-every: 1\n    poll-every-unit: \'hour\'\n\n  creds:\n    file: \'/path/to/credentials.json\'\n    poll-every: 5\n    poll-every-unit: \'minutes\'\n          </code></pre>\n        </li>\n        <li>\n          <pre><code class="java">{{\'\npublic class Configurations {\n\n  public static final ConfigurationJsonImpl&lt;Database&gt; db;\n  public static final ConfigurationJsonCollectionImpl&lt;List&lt;Credentials&gt;&gt; creds;\n\n  static {\n    EventBus eventBus = new EventBusSyncImpl();\n    Watch watch = Watch.config("/path/to/master.yml").withEventBus(eventBus);\n\n    db = watch.json("db").mappedTo(Database.class);\n    creds = watch.json("creds").mappedTo(new TypeReference&lt;List&lt;Credentials&gt;&gt;() {});\n  }\n}\n        \'}}</code></pre>\n        </li>\n        <li>\n          <pre><code class="java">{{\'\npublic static void main(String[] args) {\n  String database = Configurations.db.getValue().getDatabase();\n  String host = Configurations.db.getValue().getHost();\n  Connection connection = createConnection(database, host);\n  Credentials credentials = Configurations.creds\n    .getValue()\n    .stream()\n    .filter(c -> c.getUsername().equals("admin"))\n    .findFirst()\n    .get();\n  query(connection, credentials.getUsername(), credentials.getPassword());\n}\n        \'}}</code></pre>\n        </li>\n      </ul>\n\n      <hr/>\n\n      <h2 id="properties">Java .properties configuration objects</h2>\n      <p>\n        Map your .properties files to <code>ConfigurationPropertiesImpl</code>.\n      </p>\n\n      <ul class="uk-tab" data-uk-tab="{connect: \'#tab-properties\'}">\n        <li><a href="">database.properties</a></li>\n        <li><a href="">master.yml</a></li>\n        <li><a href="">Configurations.java</a></li>\n        <li><a href="">Application.java</a></li>\n      </ul>\n      <ul id="tab-properties" class="uk-switcher">\n        <li>\n          <pre><code class="bash">\ndb=client\nhost=db.mydomain.com\nusername=admin\npassword=adm1n_s3cr3t\n          </code></pre>\n        </li>\n        <li>\n          <pre><code class="yaml makefile">\nmaster:\n  poll-every: 60\n  poll-every-unit: \'seconds\'\n  pool-size: 10\n\nfiles:\n  db:\n    file: \'/path/to/database.properties\'\n    poll-every: 1\n    poll-every-unit: \'hour\'\n          </code></pre>\n        </li>\n        <li>\n          <pre><code class="java">{{\'\npublic class Configurations {\n\n  public static final ConfigurationPropertiesImpl db;\n\n  static {\n    EventBus eventBus = new EventBusSyncImpl();\n    Watch watch = Watch.config("/path/to/master.yml").withEventBus(eventBus);\n\n    db = watch.properties("db");\n  }\n}\n        \'}}</code></pre>\n        </li>\n        <li>\n          <pre><code class="java">{{\'\npublic static void main(String[] args) {\n  String database = Configurations.db.getString("db");\n  String host = Configurations.db.getString("host");\n  Connection connection = createConnection(database, host);\n  String username = Configurations.db.getString("username");\n  String password = Configurations.db.getString("password");\n  query(connection, username, password);\n}\n        \'}}</code></pre>\n        </li>\n      </ul>\n\n      <hr/>\n\n      <h2 id="xml">XML configuration objects</h2>\n      <p>\n        Map your XML files to <code>ConfigurationXmlImpl</code>.\n      </p>\n\n      <ul class="uk-tab" data-uk-tab="{connect: \'#tab-xml\'}">\n        <li><a href="">database.xml</a></li>\n        <li><a href="">Database.java</a></li>\n        <li><a href="">Credentials.java</a></li>\n        <li><a href="">master.yml</a></li>\n        <li><a href="">Configurations.java</a></li>\n        <li><a href="">Application.java</a></li>\n      </ul>\n      <ul id="tab-xml" class="uk-switcher">\n        <li>\n          <pre><code class="xml">\n&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;\n&lt;database&gt;\n  &lt;db&gt;client&lt;/db&gt;\n  &lt;host&gt;db.mydomain.com&lt;/host&gt;\n  &lt;credentialList&gt;\n    &lt;credentials&gt;\n      &lt;username&gt;admin&lt;/username&gt;\n      &lt;password&gt;adm1n_s3cr3t&lt;/password&gt;\n    &lt;/credentials&gt;\n    &lt;credentials&gt;\n      &lt;username&gt;service_a&lt;/username&gt;\n      &lt;password&gt;s3rv1c3_a_s3cr3t&lt;/password&gt;\n    &lt;/credentials&gt;\n    &lt;credentials&gt;\n      &lt;username&gt;service_b&lt;/username&gt;\n      &lt;password&gt;s3rv1c3_b_s3cr3t&lt;/password&gt;\n    &lt;credentials&gt;\n  &lt;/credentialList&gt;\n&lt;database&gt;\n          </code></pre>\n        </li>\n        <li>\n          <pre><code class="java">{{\'\n@XmlRootElement\npublic class Database {\n  @XmlAttribute(name="db")\n  private String database;\n  private String host;\n  private List&lt;Credentials&gt; credentialList;\n\n  public String getDatabase() { return database; }\n  public String getHost() { return host; }\n  public List&lt;Credentials&gt; getCredentialList() { return credentialList; }\n  public void setDatabase(String database) { this.database = database; }\n  public void setHost(String host) { this.host = host };\n  public void setCredentialList(List&lt;Credentials&gt; credentialList) { this.credentialList = credentialList; }\n}\n        \'}}</code></pre>\n        </li>\n        <li>\n          <pre><code class="java">{{\'\npublic class Credentials {\n  private String username;\n  private String password;\n\n  public String getUsername() { return username; }\n  public String getPassword() { return password; }\n  public void setUsername(String username) { this.username = username; }\n  public void setPassword(String password) { this.password = password; }\n}\n        \'}}</code></pre>\n        </li>\n        <li>\n          <pre><code class="yaml makefile">\nmaster:\n  poll-every: 60\n  poll-every-unit: \'seconds\'\n  pool-size: 10\n\nfiles:\n  db:\n    file: \'/path/to/database.xml\'\n    poll-every: 1\n    poll-every-unit: \'hour\'\n          </code></pre>\n        </li>\n        <li>\n          <pre><code class="java">{{\'\npublic class Configurations {\n\n  public static final ConfigurationXmlImpl&lt;Database&gt; db;\n\n  static {\n    EventBus eventBus = new EventBusSyncImpl();\n    Watch watch = Watch.config("/path/to/master.yml").withEventBus(eventBus);\n\n    db = watch.xml("db").mappedTo(Database.class);\n  }\n}\n        \'}}</code></pre>\n        </li>\n        <li>\n          <pre><code class="java">{{\'\npublic static void main(String[] args) {\n  String database = Configurations.db.getValue().getDatabase();\n  String host = Configurations.db.getValue().getHost();\n  Connection connection = createConnection(database, host);\n  Credentials credentials = db.getCredentialList()\n    .stream()\n    .filter(c -> c.getUsername().equals("admin"))\n    .findFirst()\n    .get();\n  query(connection, credentials.getUsername(), credentials.getPassword());\n}\n        \'}}</code></pre>\n        </li>\n      </ul>\n\n      <hr/>\n\n      <h2 id="yaml">YAML configuration objects</h2>\n      <p>\n        If your YAML configuration file models a single object, you can map it to <code>ConfigurationYamlImpl</code>.\n      </p>\n      <p>\n        If your YAML configuration file models a collection of objects, you can map it to <code>ConfigurationYamlCollectionImpl</code>.\n      </p>\n\n      <ul class="uk-tab" data-uk-tab="{connect: \'#tab-yaml\'}">\n        <li><a href="">database.yml</a></li>\n        <li><a href="">Database.java</a></li>\n        <li><a href="">credentials.yml</a></li>\n        <li><a href="">Credentials.java</a></li>\n        <li><a href="">master.yml</a></li>\n        <li><a href="">Configurations.java</a></li>\n        <li><a href="">Application.java</a></li>\n      </ul>\n      <ul id="tab-yaml" class="uk-switcher">\n        <li>\n          <pre><code class="yaml makefile">\ndb: \'clients\'\nhost: \'db.mydomain.com\'\n          </code></pre>\n        </li>\n        <li>\n          <pre><code class="java">{{\'\npublic class Database {\n  @JsonProperty("db")\n  private String database;\n  private String host;\n\n  public String getDatabase() { return database; }\n  public String getHost() { return host; }\n  public void setDatabase(String database) { this.database = database; }\n  public void setHost(String host) { this.host = host };\n}\n        \'}}</code></pre>\n        </li>\n        <li>\n          <pre><code class="yaml makefile">\n- username: \'admin\'\n  password: \'adm1n_s3cr3t\'\n\n- username: \'service_a\'\n  password: \'s3rv1c3_a_s3cr3t\'\n\n- username: \'service_b\'\n  password: \'s3rv1c3_b_s3cr3t\'\n          </code></pre>\n        </li>\n        <li>\n          <pre><code class="java">{{\'\npublic class Credentials {\n  private String username;\n  private String password;\n\n  public String getUsername() { return username; }\n  public String getPassword() { return password; }\n  public void setUsername(String username) { this.username = username; }\n  public void setPassword(String password) { this.password = password; }\n}\n        \'}}</code></pre>\n        </li>\n        <li>\n          <pre><code class="yaml makefile">\nmaster:\n  poll-every: 60\n  poll-every-unit: \'seconds\'\n  pool-size: 10\n\nfiles:\n  db:\n    file: \'/path/to/database.yml\'\n    poll-every: 1\n    poll-every-unit: \'hour\'\n\n  creds:\n    file: \'/path/to/credentials.yml\'\n    poll-every: 5\n    poll-every-unit: \'minutes\'\n          </code></pre>\n        </li>\n        <li>\n          <pre><code class="java">{{\'\npublic class Configurations {\n\n  public static final ConfigurationYamlImpl&lt;Database&gt; db;\n  public static final ConfigurationYamlCollectionImpl&lt;List&lt;Credentials&gt;&gt; creds;\n\n  static {\n    EventBus eventBus = new EventBusSyncImpl();\n    Watch watch = Watch.config("/path/to/master.yml").withEventBus(eventBus);\n\n    db = watch.yaml("db").mappedTo(Database.class);\n    creds = watch.yaml("creds").mappedTo(new TypeReference&lt;List&lt;Credentials&gt;&gt;() {});\n  }\n}\n        \'}}</code></pre>\n        </li>\n        <li>\n          <pre><code class="java">{{\'\npublic static void main(String[] args) {\n  String database = Configurations.db.getValue().getDatabase();\n  String host = Configurations.db.getValue().getHost();\n  Connection connection = createConnection(database, host);\n  Credentials credentials = Configurations.creds\n    .getValue()\n    .stream()\n    .filter(c -> c.getUsername().equals("admin"))\n    .findFirst()\n    .get();\n  query(connection, credentials.getUsername(), credentials.getPassword());\n}\n        \'}}</code></pre>\n        </li>\n      </ul>\n\n      <hr/>\n\n      <h2 id="directory">Directory configuration objects</h2>\n      <p>\n        Let\'s say that instead of watching a single file, you want to watch an entire directory and have your code react when the contents\n        of the directory change. In that case, we\'ll use a <code>ConfigurationDirectoryImpl</code>.\n      </p>\n\n      <p>\n        Let\'s assume your directory structure looks like this:\n      </p>\n      <pre><code class="nohighlight">\nclients/\n  apple.css\n  google.css\n  paypal/\n    venmo.css\n    braintree.css\n      </code></pre>\n\n      <ul class="uk-tab" data-uk-tab="{connect: \'#tab-directory\'}">\n        <li><a href="">master.yml</a></li>\n        <li><a href="">Configurations.java</a></li>\n        <li><a href="">Application.java</a></li>\n      </ul>\n      <ul id="tab-directory" class="uk-switcher">\n        <li>\n          <pre><code class="yaml makefile">\nmaster:\n  poll-every: 60\n  poll-every-unit: \'seconds\'\n  pool-size: 10\n\nfiles:\n  db:\n    file: \'/path/to/clients\'\n    poll-every: 4\n    poll-every-unit: \'minutes\'\n          </code></pre>\n        </li>\n        <li>\n          <pre><code class="java">{{\'\npublic class Configurations {\n\n  public static final ConfigurationPropertiesImpl db;\n\n  static {\n    EventBus eventBus = new EventBusSyncImpl();\n    Watch watch = Watch.config("/path/to/master.yml").withEventBus(eventBus);\n\n    db = watch.directory("clients");\n  }\n}\n        \'}}</code></pre>\n        </li>\n        <li>\n          <pre><code class="java">{{\'\npublic static void main(String[] args) {\n  File google = Configurations.clients.getValue().get("google.css");\n  File venmo = Configurations.clients.getValue().get("paypal/venmo.css");\n  File braintree = Configurations.clients.getValue().get("paypal/braintree.css");\n}\n        \'}}</code></pre>\n        </li>\n      </ul>\n\n      <hr/>\n\n      <h2 id="custom">Custom configuration objects</h2>\n      <p>\n        You can also define your own custom configuration objects by extending the <code>ConfigurationAbstractImpl</code> class.\n        As an example, here is how to design a configuration object for a CSV file:\n      </p>\n\n      <ul class="uk-tab" data-uk-tab="{connect: \'#tab-custom\'}">\n        <li><a href="">clients.csv</a></li>\n        <li><a href="">master.yml</a></li>\n        <li><a href="">ConfigurationClientsImpl.java</a></li>\n        <li><a href="">Configurations.java</a></li>\n        <li><a href="">Application.java</a></li>\n      </ul>\n      <ul id="tab-custom" class="uk-switcher">\n        <li>\n          <pre><code class="csv">\nid,company,parent\n1,Apple,\n2,Google,Alphabet\n3,Venmo,PayPal\n4,Braintree,PayPal\n          </code></pre>\n        </li>\n        <li>\n          <pre><code class="yaml makefile">\nmaster:\n  poll-every: 60\n  poll-every-unit: \'seconds\'\n  pool-size: 10\n\nfiles:\n  db:\n    file: \'/path/to/clients.csv\'\n    poll-every: 1\n    poll-every-unit: \'hour\'\n          </code></pre>\n        </li>\n        <li>\n          <pre><code class="java">{{\'\npublic class ConfigurationClientsImpl extends ConfigurationAbstractImpl&lt;List&lt;Client&gt;&gt; {\n\n  public ConfigurationClientsImpl(String sourceId, File configFile, EventBus eventBus) throws IOException {\n    super(sourceId, eventBus);\n    init(configFile);\n  }\n\n  /**\n   * This method is called on startup and also when the associated configFile is updated. It defines the cached\n   * configuration file you get by calling getValue().\n   */\n  @Override\n  public List&lt;Client&gt; load(File configFile) throws IOException {\n    List&lt;Client&gt; clients = new ArrayList&lt;&gt;();\n    try (Scanner scanner = new Scanner(configFile)) {\n      while (scanner.hasNextLine()) {\n        String line = scanner.nextLine();\n        String[] lineParts = line.split(",");\n        Client client = new Client(lineParts[0], lineParts[1], lineParts[2]);\n        clients.add(client);\n      }\n    }\n    return clients;\n  }\n}\n        \'}}</code></pre>\n        <li>\n          <pre><code class="java">{{\'\npublic class Configurations {\n\n  public static final ConfigurationClientsImpl clients;\n\n  static {\n    EventBus eventBus = new EventBusSyncImpl();\n    Watch watch = Watch.config("/path/to/master.yml").withEventBus(eventBus);\n\n    clients = watch.custom("clients").mappedWith(new Function&lt;CustomConfigurationParams, ConfigurationClientsImpl&gt;() {\n      @Override\n      public ConfigurationClientsImpl apply(CustomConfigurationParams params) {\n        try {\n          return new ConfigurationClientsImpl(params.getSourceId(), params.getFile(), params.getEventBus());\n        }\n        catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    });\n  }\n}\n        \'}}</code></pre>\n        </li>\n        <li>\n          <pre><code class="java">{{\'\npublic static void main(String[] args) {\n  String company1 = Configurations.clients.getValue().get(0).getCompany();\n  String company2 = Configurations.clients.getValue().get(1).getCompany();\n}\n        \'}}</code></pre>\n        </li>\n      </ul>\n\n    </article>\n  </div>\n  <div class="uk-hidden-small uk-width-medium-2-5 uk-width-large-1-4">\n    <div data-uk-sticky="{top: 10}">\n      <ul class="uk-nav uk-nav-side" data-uk-scrollspy-nav="{closest: \'li\', smoothscroll: true, cls: \'uk-active\'}">\n        <li class="uk-nav-header">Quickstart</li>\n        <li><a href="#qs-yaml">Master YAML</a></li>\n        <li><a href="#qs-watch">Creating <code>Watch</code> singleton</a></li>\n        <li><a href="#qs-config">Creating configuration objects</a></li>\n        <li class="uk-nav-divider"></li>\n\n        <li class="uk-nav-header">Configuration object types</li>\n        <li><a href="#json">JSON</a></li>\n        <li><a href="#properties">Java .properties</a></li>\n        <li><a href="#xml">XML</a></li>\n        <li><a href="#yaml">YAML</a></li>\n        <li><a href="#directory">Entire directories</a></li>\n        <li><a href="#custom">Custom types</a></li>\n      </ul>\n    </div>\n  </div>\n</div>\n'},kZql:function(e,n,t){"use strict";t.d(n,"a",function(){return i});var i={production:!0}},ljLh:function(e,n){e.exports='<div class="uk-container uk-container-cente uk-margin-large-top">\n  <div class="uk-grid">\n    <div class="uk-hidden-small uk-width-medium-1-4 uk-width-large-1-5">\n      <div data-uk-sticky="{top: 10}">\n        <app-nav [clazz]="\'uk-nav uk-nav-side\'"></app-nav>\n      </div>\n    </div>\n\n    <div class="uk-width-1-1 uk-width-medium-3-4 uk-width-large-4-5">\n      <router-outlet></router-outlet>\n    </div>\n  </div>\n</div>\n'},mxwL:function(e,n,t){"use strict";t.d(n,"a",function(){return i});var i=function(){function e(){}return e}()},peM0:function(e,n){e.exports='<ul class="{{clazz}}">\n  <li class="uk-nav-header">Getting started</li>\n  <li routerLinkActive="uk-active"><a routerLink="/introduction">Introduction</a></li>\n  <li routerLinkActive="uk-active"><a routerLink="/installation">Installation</a></li>\n\n  <li class="uk-nav-divider"></li>\n  <li class="uk-nav-header">Modules</li>\n  <li routerLinkActive="uk-active"><a routerLink="/commons-cli">commons-cli</a></li>\n  <li routerLinkActive="uk-active"><a routerLink="/commons-compress">commons-compress</a></li>\n  <li routerLinkActive="uk-active"><a routerLink="/commons-config">commons-config</a></li>\n\n  <li class="uk-nav-divider"></li>\n  <li class="uk-nav-header">Releases</li>\n  <li routerLinkActive="uk-active" *ngFor="let release of releases">\n    <a routerLink="/releases/{{release.name}}">{{release.name}}</a>\n  </li>\n</ul>\n'},qM4v:function(e,n,t){"use strict";var i=t("3j3K");t.d(n,"a",function(){return o});var a=this&&this.__decorate||function(e,n,t,i){var a,s=arguments.length,o=s<3?n:null===i?i=Object.getOwnPropertyDescriptor(n,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,n,t,i);else for(var r=e.length-1;r>=0;r--)(a=e[r])&&(o=(s<3?a(o):s>3?a(n,t,o):a(n,t))||o);return s>3&&o&&Object.defineProperty(n,t,o),o},s=[{name:"1.0",date:"June 13, 2017",notes:"Requires Java 1.7+",bugs:"None",downloads:[{module:"commons-cli",suffix:".jar",md5:"b587e4ccfa5c6bb7a295109bd3395662",sha1:"75075309dd045a0618069fc339972119fa6fe611"},{module:"commons-cli",suffix:"-javadoc.jar",md5:"a1359159250e74da497198502856eef8",sha1:"34e2d07b2237d2335973cf8e94844f7f4425abbb"},{module:"commons-cli",suffix:"-sources.jar",md5:"d04136d52313ffd54b798acf8faca1e6",sha1:"d063836886dbcd51ffcce2f058c0ee80cebf8c86"},{module:"commons-compress",suffix:".jar",md5:"1344935618c4684c41b007b71a1bafc1",sha1:"0f1609c301347783935df528ee2c1a08a8c4d607"},{module:"commons-compress",suffix:"-javadoc.jar",md5:"5057a0c1892faa16559f1581047f4da9",sha1:"b52fd7d3da184074c92783b075d8a507122f514b"},{module:"commons-compress",suffix:"-sources.jar",md5:"a63f7bf66ed9f8cc330a1e09331c11d5",sha1:"bbb2a8cc30447340be2fe5a4d537536d9d0d299a"},{module:"commons-config",suffix:".jar",md5:"862a5885c92941fe6b72f15b3e9dbf36",sha1:"0b16405c002ea8c763ee8218927a8b30d3afa121"},{module:"commons-config",suffix:"-javadoc.jar",md5:"8b4f8db78f979c39093650d769046359",sha1:"4b4d3835181494912f7ef900b95a07fcd170eb69"},{module:"commons-config",suffix:"-sources.jar",md5:"9ddd6823242ccbfa0578f0599b9d8ee5",sha1:"d858a20ca27a2415ad435815dc37cfaa2dc0f6d1"}]}],o=function(){function e(){}return e.prototype.getLatestRelease=function(){return Promise.resolve(s[s.length-1])},e.prototype.getRelease=function(e){return Promise.resolve(s.find(function(n){return n.name==e}))},e.prototype.getReleases=function(){return Promise.resolve(s)},e}();o=a([t.i(i.c)()],o)},rHd9:function(e,n){e.exports='<div class="uk-grid">\n  <div class="uk-width-1-1 uk-width-medium-3-5 uk-width-large-3-4">\n    <article class="uk-article">\n      <h1 class="uk-article-title">\n        <code>commons-cli</code>\n      </h1>\n\n      <p class="uk-article-lead">\n        Java provides the <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/ProcessBuilder.html">ProcessBuilder</a> to create OS-level system processes.\n        This library wraps the ProcessBuilder in an effort to make deploying and interpreting these processes easier.\n      </p>\n\n      <p>\n        GitHub source: <a href="https://github.com/alanbuttars/commons-java/tree/master/commons-cli" target="_blank">https://github.com/alanbuttars/commons-java/tree/master/commons-cli</a>.\n      </p>\n\n      <hr/>\n\n      <h2 id="quickstart">Quickstart</h2>\n      <p>\n        The first step is to create a <code>CommandLineRequest</code>, which will define the process to run, whether or not to enforce a timeout on that process, and\n        how to interpret whether that process completed successfully.\n      </p>\n\n      <pre><code class="java">{{\'\nCommandLineRequest request = new CommandLineRequestBuilder()//\n  .build("/path/to/script.sh --first Alan --last Buttars");\n\nCommandLineResponse response = Processes.execute(request);\nif (response.succeeded()) {\n  // conclusive success\n  System.out.println(response.getInfoStream());\n}\nelse if (response.failed()) {\n  // conclusive failure\n  System.out.println(response.getExitCode());\n  System.err.println(response.getErrorStream());\n}\nelse {\n  // non-conclusive result\n  System.out.println(response.getExitCode());\n  System.out.println(response.getInfoStream());\n  System.err.println(response.getErrorStream());\n}\'}}\n      </code></pre>\n\n      <hr/>\n\n      <h2 id="evaluate">Evaluating process output</h2>\n      <p>\n        When <code>Processes.execute(CommandLineRequest)</code> is called, this module maps the info and error streams of the process to a <code>CommandLineResponse</code>.\n        This mapping assumes that the process will follow standard command-line conventions (e.g., error messages will go to the error stream, an exit code of 0 indicates success).\n        If your process is different, you can provide customized mapping behavior with <code>CommandLineRequestBuilder.withEvaluator(CommandLineEvaluator)</code>.\n      </p>\n\n      <h3><code>CommandLineEvaluatorExitStatusImpl</code> &mdash; Evaluate by exit code</h3>\n      <p>\n        This is the default.\n      </p>\n      <dl class="uk-description-list-horizontal">\n        <dt>success</dt>\n        <dd>\n          <ul>\n            <li>when exit code is 0</li>\n          </ul>\n        </dd>\n\n        <dt>failure</dt>\n        <dd>\n          <ul>\n            <li>any other case</li>\n          </ul>\n        </dd>\n      </dl>\n      <pre><code class="java">\nCommandLineRequest request = new CommandLineRequestBuilder()//\n  .build("ls");\n      </code></pre>\n\n      <h3><code>CommandLineEvaluatorKeywordImpl</code> &mdash; Evaluate by keyword</h3>\n      <p>\n        This is used when you want to determine success or failure based on specific messages in the info or error stream.\n      </p>\n      <dl class="uk-description-list-horizontal">\n        <dt>success</dt>\n        <dd>\n          <ul>\n            <li>when a succeedOn() keyword is found in the info or error stream, but not on the same line as an ignore() keyword</li>\n            <li>when no failOn() keyword is found and exit code is 0</li>\n          </ul>\n        </dd>\n\n        <dt>failure</dt>\n        <dd>\n          <ul>\n            <li>when a failOn() keyword is found in the info or error stream, but not on the same line as an ignore() keyword</li>\n            <li>when no succeedOn() keyword is found and exit code is not 0</li>\n          </ul>\n        </dd>\n      </dl>\n      <pre><code class="java">\nCommandLineRequest request = new CommandLineRequestBuilder()//\n  .withEvaluator(\n    new CommandLineEvaluatorKeywordImpl()//\n      .succeedOn("User registered!")//\n      .failOn("User registration failed!")//\n      .ignore("User registration failed! Retrying...")\n  )//\n  .build("/path/to/register.sh --first Alan --last Buttars");\n      </code></pre>\n\n      <h3><code>CommandLineEvaluatorAbstractImpl</code> &mdash; Evaluate with custom logic</h3>\n      <p>\n        Define your own custom behavior.\n      </p>\n\n      <pre><code class="java">{{\'\nCommandLineRequest request = new CommandLineRequestBuilder()//\n  .withEvaluator(\n    new CommandLineEvaluatorAbstractImpl() {\n\n      private boolean alreadyRegistered = false;\n\n      @Override\n      public Evaluation evaluateInfoStream(String infoStreamLine) {\n        alreadyRegistered |= infoStreamLine.contains("User was already registered");\n        return Evaluation.NON_CONCLUSIVE;\n      }\n\n      @Override\n      public Evaluation evaluateErrorStream(String errorStreamLine) {\n        return ConclusiveEvaluation.NON_CONCLUSIVE;\n      }\n\n      @Override\n      public ConclusiveEvaluation evaluateExitCode(int exitCode) {\n        if (exitCode == 0 || alreadyRegistered) {\n          return ConclusiveEvaluation.SUCCESS;\n        }\n        return ConclusiveEvaluation.FAILURE;\n      }\n\n    }\n  )//\n  .build("/path/to/register.sh --first Alan --last Buttars");\n      \'}}</code></pre>\n\n      <hr/>\n\n      <h2 id="timeout">Interrupting on timeout</h2>\n      <p>\n        By default, processes are allowed to run until they exit or are interrupted. If you\'d like to put a time restraint on the process, you can do so easily:\n      </p>\n\n      <pre><code class="java">{{\'\nCommandLineRequest request = new CommandLineRequestBuilder()//\n  .interruptAfter(5000)//\n  .build("/path/to/long_running_script.sh");\n\nCommandLineResponse response = Processes.execute(request);\nSystem.out.println("Failed: " + response.failed());\nSystem.out.println("Interrupted: " + response.interrupted());\nSystem.out.println("Non-interruption exception thrown: " + response.exceptionThrown());\nif (response.interrupted()) {\n  System.out.println("Interruption message: " + response.getException().getMessage());\n}\n    \'}}</code></pre>\n\n      <p>The above code would print the following:</p>\n\n      <pre><code class="shell">\nFailed: true\nInterrupted: true\nNon-interruption exception thrown: false\nInterruption message: Process interrupted after 5000 millis\n      </code></pre>\n\n      <hr/>\n\n      <h2 id="interrupt">Interrupting on failure</h2>\n      <p>\n        By default, processes are allowed to run until they exit or are interrupted. But you may want the process to exit as soon as it has been evaluated as a failure (which may occur well before the script actually concludes).\n      </p>\n\n      <pre><code class="java">\nCommandLineRequest request = new CommandLineRequestBuilder()//\n  .withEvaluator(\n    new CommandLineEvaluatorKeywordImpl()//\n      .succeedOn("User registered!")//\n      .failOn("User registration failed! Now I\'m going to try and clean things up...")\n  )//\n  .build("/path/to/register.sh --first Alan --last Buttars");\nCommandLineResponse response = Processes.execute(request);\nSystem.out.println("Failed: " + response.failed());\nSystem.out.println("Interrupted: " + response.interrupted());\nSystem.out.println("Non-interruption exception thrown: " + response.exceptionThrown());\n      </code></pre>\n\n      <p>The above code would print the following:</p>\n\n      <pre><code class="shell">\nFailed: true\nInterrupted: true\nNon-interruption exception thrown: false\n      </code></pre>\n\n      <hr/>\n\n      <h2 id="arguments">Wrapping arguments</h2>\n      <p>\n        Depending on your system or the process you are trying to execute, sometimes you will need to wrap arguments which contain spaces.\n        We provide the <code>Argument</code> class, which will wrap a given value if it contains a space.\n      </p>\n\n      <pre><code class="java">{{\'\nList&lt;String&gt; names = Arrays.asList("Ichiro", "Alan Buttars");\nfor (String name : names) {\n  List&lt;Argument&gt; arguments = Arrays.asList(//\n    new Argument("/path/to/script.sh"), //\n    new Argument("-name"), //\n    new Argument(name, \\\'"\\\')\n  );\n  CommandLineRequest request = new CommandLineRequestBuilder().build(arguments);\n  CommandLineResponse response = Processes.execute(request);\n}\n      \'}}</code></pre>\n\n      <p>\n        The above code would send the following to the command line:\n      </p>\n\n      <pre><code class="shell">\n/path/to/script.sh -name Ichiro\n/path/to/script.sh -name "Alan Buttars"\n      </code></pre>\n    </article>\n  </div>\n\n  <div class="uk-hidden-small uk-width-medium-2-5 uk-width-large-1-4">\n    <div data-uk-sticky="{top: 10}">\n      <ul class="uk-nav uk-nav-side" data-uk-scrollspy-nav="{closest: \'li\', smoothscroll: true, cls: \'uk-active\'}">\n        <li><a href="#quickstart">Quickstart</a></li>\n        <li><a href="#evaluate">Evaluating process output</a></li>\n        <li><a href="#timeout">Interrupting on timeout</a></li>\n        <li><a href="#interrupt">Interrupting on failure</a></li>\n        <li><a href="#arguments">Wrapping arguments</a></li>\n      </ul>\n    </div>\n  </div>\n</div>\n'},x35b:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t("3j3K"),a=t("O61y"),s=t("Iksp");t("kZql").a.production&&t.i(i.a)(),t.i(a.a)().bootstrapModule(s.a)},xu13:function(e,n,t){"use strict";var i=t("3j3K"),a=t("mxwL");t.d(n,"a",function(){return r});var s=this&&this.__decorate||function(e,n,t,i){var a,s=arguments.length,o=s<3?n:null===i?i=Object.getOwnPropertyDescriptor(n,t):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,n,t,i);else for(var r=e.length-1;r>=0;r--)(a=e[r])&&(o=(s<3?a(o):s>3?a(n,t,o):a(n,t))||o);return s>3&&o&&Object.defineProperty(n,t,o),o},o=this&&this.__metadata||function(e,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,n)},r=function(){function e(){}return e.prototype.ngAfterViewInit=function(){$("pre code").each(function(e,n){hljs.highlightBlock(n)})},e}();s([t.i(i.n)(),o("design:type","function"==typeof(l=void 0!==a.a&&a.a)&&l||Object)],r.prototype,"release",void 0),r=s([t.i(i._11)({selector:"app-release",template:t("yfBk")})],r);var l},yfBk:function(e,n){e.exports='<h2>Maven</h2>\n<pre><code class="xml">\n&lt;dependency&gt;\n  &lt;groupId&gt;com.alanbuttars.commons&lt;/groupId&gt;\n  &lt;artifactId&gt;commons-cli&lt;/artifactId&gt;\n  &lt;version&gt;{{release.name}}&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n  &lt;groupId&gt;com.alanbuttars.commons&lt;/groupId&gt;\n  &lt;artifactId&gt;commons-compress&lt;/artifactId&gt;\n  &lt;version&gt;{{release.name}}&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n  &lt;groupId&gt;com.alanbuttars.commons&lt;/groupId&gt;\n  &lt;artifactId&gt;commons-config&lt;/artifactId&gt;\n  &lt;version&gt;{{release.name}}&lt;/version&gt;\n&lt;/dependency&gt;\n\n</code></pre>\n\n<hr/>\n\n\x3c!--\n<h3>Gradle</h3>\n<pre><code class="gradle">\ncompile group: \'com.alanbuttars.commons\', name: \'commons\', version: \'{{release.name}}\'\n\n</code></pre>\n\n<hr/>\n--\x3e\n\n<h2>Manual downloads</h2>\n<table class="uk-table uk-table-hover">\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th class="uk-hidden-small">md5</th>\n      <th class="uk-hidden-small">sha1</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor="let download of release.downloads">\n      <td>{{download.module}}-{{release.name}}{{download.suffix}}</td>\n      <td class="uk-hidden-small">{{download.md5}}</td>\n      <td class="uk-hidden-small">{{download.sha1}}</td>\n      <td><a class="uk-icon-download" target="_blank" href="https://repo1.maven.org/maven2/com/alanbuttars/commons/{{download.module}}/{{release.name}}/{{download.module}}-{{release.name}}{{download.suffix}}"></a></td>\n    </tr>\n  </tbody>\n</table>\n'}},[0]);